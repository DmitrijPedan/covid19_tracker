{"version":3,"sources":["components/Header/Header.module.scss","components/InfoCard/InfoCard.module.scss","components/CountrySelect/CountrySelect.module.scss","components/Chart/Chart.module.scss","components/infoTable/infoTable.module.scss","config/urlConstants.js","services/fetchApi.js","components/Loader/Loader.jsx","components/Header/Header.jsx","components/InfoCard/InfoCard.jsx","components/CountrySelect/CountrySelect.jsx","components/Chart/Chart.jsx","config/tableConfigs.js","components/infoTable/infoTable.jsx","App.js","serviceWorker.js","index.js","App.module.scss","components/Loader/Loader.module.scss"],"names":["module","exports","MATHDRO_URL","fetchCovidData","selectedCountry","a","modifiedUrl","fetch","response","json","data","modifiedData","status","titleEn","titleRu","value","confirmed","lastUpdate","recovered","deaths","console","log","fetchDayData","map","el","total","date","reportDate","fetchCountriesData","allCountriesResponse","countries","rusNamesResponse","country","countryList","restCountryResponse","restCountries","elem","result","find","iso3","alpha3","nameRus","name","alpha3Code","population","flag","filter","sort","b","fetchTableData","arr","Promise","all","Loader","className","styles","container","CircularProgress","color","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","handlerChangeTheme","themeApp","AppBar","position","Toolbar","FormControlLabel","control","Switch","onChange","Container","Grid","justify","direction","alignItems","Typography","variant","InfoCard","i","key","item","component","Card","xs","md","CardContent","gutterBottom","start","end","duration","separator","Date","toLocaleDateString","CountrySelect","handleCountrySelect","useState","setCountries","useEffect","fetchCountries","FormControl","InputLabel","htmlFor","NativeSelect","id","defaultValue","event","target","FormHelperText","Chart","countryData","globalData","setGlobalData","fetchData","lineChart","length","labels","datasets","label","borderWidth","pointRadius","pointStyle","borderColor","backgroundColor","fill","options","display","text","barChart","legend","columns","minWidth","align","format","toLocaleString","width","height","InfoTable","classes","page","setPage","rowsPerPage","setRowsPerPage","setData","table","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","style","TableBody","deathsPersent","slice","row","hover","role","tabIndex","TablePagination","rowsPerPageOptions","labelRowsPerPage","backIconButtonText","nextIconButtonText","count","onChangePage","newPage","onChangeRowsPerPage","App","setThemeApp","covidData","setCovidData","setSelectedCountry","displayTable","setDisplayTable","createMuiTheme","palette","type","fetchedData","ThemeProvider","CssBaseline","Button","onClick","button","Boolean","window","location","hostname","match","document","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90ad2ac6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__21wXn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"confirmed\":\"InfoCard_confirmed__3y1k2\",\"recovered\":\"InfoCard_recovered__2a97-\",\"deaths\":\"InfoCard_deaths__37PJn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountrySelect_container__1E-jy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3SDj1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"infoTable_container__3i9qB\",\"button\":\"infoTable_button__39X60\"};","export const MATHDRO_URL = 'https://covid19.mathdro.id/api';\nexport const RUS_COUNTRIES_URL = 'https://dmitrijpedan.github.io/covid19_tracker/countries.json';\nexport const RESTCOUNTRIES_URL = 'https://restcountries.eu/rest/v2/all?fields=alpha3Code;population;flag';","import {MATHDRO_URL, RUS_COUNTRIES_URL, RESTCOUNTRIES_URL} from '../config/urlConstants';\n\nexport const fetchCovidData = async (selectedCountry) => {\n    let modifiedUrl = selectedCountry && selectedCountry !== 'Global' \n        ? `${MATHDRO_URL}/countries/${selectedCountry}` \n        : MATHDRO_URL;\n    try {\n        const response = await fetch(modifiedUrl);\n        const data = await response.json();\n        const modifiedData = {\n            status: response.status,\n            data : [\n                {titleEn: 'confirmed', titleRu: 'Инфицировано', value: data.confirmed.value, lastUpdate: data.lastUpdate},\n                {titleEn: 'recovered', titleRu: 'Выздоровевших', value: data.recovered.value, lastUpdate: data.lastUpdate},\n                {titleEn: 'deaths', titleRu: 'Умерших', value: data.deaths.value, lastUpdate: data.lastUpdate},\n            ],\n        };\n        return modifiedData;\n    } catch (error) {\n        console.log(error);\n        return null;\n    }\n};\n\nexport const fetchDayData = async () => {\n    try {\n        const response = await fetch(`${MATHDRO_URL}/daily`);\n        const data = await response.json();\n        const modifiedData = data.map((el) => ({\n            confirmed: el.confirmed.total,\n            deaths: el.deaths.total,\n            date: el.reportDate,\n        }));\n        return modifiedData;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchCountriesData = async () => {\n    try {\n        const allCountriesResponse = await fetch(`${MATHDRO_URL}/countries`);\n        const {countries} = await allCountriesResponse.json();\n\n        const rusNamesResponse = await fetch(RUS_COUNTRIES_URL);\n        const {countryList: {country}} = await rusNamesResponse.json();\n\n        const restCountryResponse = await fetch(RESTCOUNTRIES_URL);\n        const restCountries = await restCountryResponse.json();\n\n        return countries\n                .map(elem => {\n                    let result = country.find(el => elem.iso3 === el.alpha3);\n                    return result ? {...elem, nameRus:result.name} : elem;\n                })\n                .map(elem => {\n                    let result = restCountries.find(el => elem.iso3 === el.alpha3Code);\n                    return result ? {...elem, population: result.population, flag: result.flag} : null;\n                })\n                .filter(el => el && el.name !== 'Gambia')\n                .sort((a, b) => (a.nameRus > b.nameRus) ? 1 : (a.nameRus < b.nameRus) ? -1 : 0);\n\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst fetchAllCountries = (arr) => Promise.all(arr.map(async (el) => {\n    const response = await fetch(`${MATHDRO_URL}/countries/${el.name}`);\n    const result = await response.json();\n    return {\n        ...el, \n        confirmed: result.confirmed.value,\n        recovered: result.recovered.value,\n        deaths: result.deaths.value,\n    };\n}));\n\nexport const fetchTableData = async () => {\n    try {\n        const countries = await fetchCountriesData();\n        return await fetchAllCountries(countries);\n    } catch (error) {\n        console.log(error);\n    }\n};","import React from 'react';\nimport {CircularProgress} from '@material-ui/core';\nimport styles from './Loader.module.scss';\n\nconst Loader = () => {\n    return (\n        <div className = {styles.container}>\n            <CircularProgress color=\"secondary\" />\n        </div> \n    )\n}\n\nexport default Loader;","import React from 'react';\nimport {AppBar, Toolbar, Grid, IconButton, Container, FormControlLabel, Switch, Typography} from '@material-ui/core';\nimport {makeStyles} from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\nimport styles from './Header.module.scss';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {flexGrow: 1},\n    menuButton: {marginRight: theme.spacing(2)},\n    title: {flexGrow: 1},\n  }));\n\nconst Header = ({handlerChangeTheme, themeApp}) => {\n\n    const classes = useStyles();\n      \n    return (\n        <header>\n        <AppBar position=\"sticky\" color = \"default\">\n            <Toolbar>\n                {/* <IconButton edge=\"start\" className={classes.menuButton} aria-label=\"menu\">\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>Меню</Typography> */}\n                <FormControlLabel control={\n                    <Switch onChange={handlerChangeTheme} color=\"secondary\"/>\n                    } />\n                    {themeApp === 'dark' ? (<Brightness3Icon/>):(<WbSunnyIcon/>)}\n            </Toolbar>\n        </AppBar>\n        <Container className = {styles.container}>\n            <Grid container spacing = {1} justify = \"center\" direction = \"column\" alignItems = \"center\"> \n                <Typography variant=\"h2\" className = \"title\" color = \"textPrimary\">COVID-19</Typography>\n                <Typography variant = \"subtitle1\" className = \"subtitle\" color = \"textSecondary\">\n                    Официальная статистика\n                </Typography> \n            </Grid>\n        </Container>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport {Card, CardContent, Typography, Grid, Container} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport styles from './InfoCard.module.scss';\n\nconst InfoCard = ({data}) => { \n    return (\n        <Container>\n            <Grid container spacing = {3} justify = \"center\"> \n            {data.map((el, i) => (\n                <Grid key = {i} item component = {Card} xs = {12} md = {3} className = {styles[el.titleEn]}>\n                    <CardContent>\n                        <Typography color = \"textSecondary\" variant = \"h6\" gutterBottom>{el.titleRu}</Typography> \n                        <Typography variant = \"h5\">\n                            <CountUp start = {0} end = {el.value} duration = {2} separator = \",\"/>\n                        </Typography> \n                        <Typography variant = \"caption\">\n                            Официальная статистика COVID-19 по состоянию на: {new Date(el.lastUpdate).toLocaleDateString()} \n                        </Typography> \n                    </CardContent> \n                </Grid> \n            ))}\n            </Grid>\n        </Container>\n    )\n}\n\nexport default InfoCard;","import React, {useState, useEffect} from 'react';\nimport {InputLabel, FormHelperText, FormControl, NativeSelect} from '@material-ui/core';\nimport {fetchCountriesData} from '../../services/fetchApi';\nimport styles from './CountrySelect.module.scss';\n\nconst CountrySelect = ({handleCountrySelect}) => {\n\n    const [countries, setCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchCountries = async () => {\n            setCountries(await fetchCountriesData())\n        };\n        fetchCountries();\n    }, []);\n\n    return (\n        <div className = {styles.container}> \n            <FormControl>\n                <InputLabel htmlFor=\"country-label\">Страна</InputLabel>\n                <NativeSelect \n                    id=\"country-label\" \n                    defaultValue=\"Global\" \n                    onChange = {(event) => handleCountrySelect(event.target.value)}>\n                        <option value=\"Global\">Все страны</option>\n                        {countries.map((el, i) => <option key={i} value={el.name}>{el.nameRus ? el.nameRus : el.name}</option>)}\n                </NativeSelect>\n                <FormHelperText>Посмотреть статистику по отдельно взятой стране</FormHelperText>\n            </FormControl>\n      </div>\n    )\n}\n\nexport default CountrySelect;","import React, {useState, useEffect} from 'react';\nimport {fetchDayData} from '../../services/fetchApi';\nimport {Line, Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.scss';\n\nconst Chart = ({countryData, country}) => {\n\n    const [globalData, setGlobalData] = useState([]);\n\n    useEffect (() => {\n        const fetchData = async () => {\n          setGlobalData(await fetchDayData())\n        };\n        fetchData();\n    }, []);\n\n    const lineChart = (\n        globalData.length ? (\n          <Line\n            data={{\n              labels: globalData.map((el) => el.date),\n              datasets: [{\n                data: globalData.map((el) => el.confirmed),\n                label: 'Инфицировано',\n                borderWidth: 1,\n                pointRadius: 2,\n                pointStyle: 'circle',\n                borderColor: 'rgb(44, 173, 248)',\n                backgroundColor: 'rgba(44, 173, 248, 0.2)',\n                fill: true,\n              },{\n                data: globalData.map((el) => el.deaths),\n                label: 'Умерших',\n                borderWidth: 1,\n                pointRadius: 2,\n                borderColor: 'rgb(230, 14, 14)',\n                backgroundColor: 'rgba(230, 14, 14, 0.2)',\n                fill: true,\n              }],\n            }}\n            options={{\n              title: { display: true, text: `Информация о COVID-19 по всем странам` },\n            }}\n          />\n        ) : null\n      );\n\n      const barChart = (\n        countryData ? (\n          <Bar\n            data={{\n              labels: countryData.map(el => el.titleRu),\n              datasets: [{\n                data: countryData.map(el => el.value),\n                label: 'Жителей',\n                backgroundColor: ['rgb(44, 173, 248)', 'rgb(50, 155, 64)', 'rgb(230, 14, 14)'],\n                fill: true,\n              }],\n            }}\n            options={{\n              legend: { display: false },\n              title: { display: true, text: `Информация о COVID-19 в выбранной стране` },\n            }}\n          />\n        ) : null\n      );\n\n    return (\n        <div className = {styles.container}>\n            {country && country !== 'Global' ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","export const createRows = (arr) => {\n    return arr.map(el => ({...el, deathsPersent: (el.deaths / el.population *100)})\n    )\n};\n\nexport const tableStyles = {\n    root: {\n      width: '100%',\n    },\n    container: {\n      height: '100%',\n    },\n}\n\nexport const columns = [\n    {\n      id: 'nameRus', \n      label: 'Страна', \n      minWidth: 120 \n    },\n    {\n      id: 'iso3', \n      label: 'Код', \n      minWidth: 100 \n    },\n    {\n      id: 'population', \n      label: 'Население',\n      minWidth: 170,\n      align: 'right',\n      format: (value) => value.toLocaleString(),\n    },\n    {\n      id: 'confirmed', \n      label: 'Подтверждено',\n      minWidth: 120,\n      align: 'right',\n      format: (value) => value.toLocaleString(),\n    },\n    {\n      id: 'recovered', \n      label: 'Выздоровевших',\n      minWidth: 120,\n      align: 'right',\n      format: (value) => value.toLocaleString(),\n    },\n    {\n      id: 'deaths', \n      label: 'Умерших',\n      minWidth: 120,\n      align: 'right',\n      format: (value) => value.toLocaleString(),\n    },\n    {\n      id: 'deathsPersent', \n      label: 'Смертность',\n      minWidth: 120,\n      align: 'right',\n      format: (value) => value.toLocaleString(),\n    },\n  ];\n\n  ","import React, {useState, useEffect} from 'react';\nimport Loader from '../Loader/Loader';\nimport {columns, createRows, tableStyles} from '../../config/tableConfigs';\nimport {fetchTableData} from '../../services/fetchApi';\n\nimport {Grid, Container} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport styles from './infoTable.module.scss';\n\nconst useStyles = makeStyles(tableStyles);\n\nconst InfoTable = () => {\n\n    const classes = useStyles();\n   \n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(25);\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        (async () => setData(await fetchTableData()))();       \n    },[]);\n \n    const handleChangePage = (event, newPage) => setPage(newPage);\n    \n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const table = (\n        data.length ?\n        (<Paper className={classes.root}>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                    <TableRow>\n                    {columns.map((column, i) => (\n                        <TableCell\n                            key={'tableCell' + i}\n                            align={column.align}\n                            style={{ minWidth: column.minWidth }}\n                            >\n                            {column.label}\n                        </TableCell>\n                    ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {createRows(data).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, i) => {\n                    return (\n                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={'tableRow' + i}>\n                        {columns.map((column, i) => {\n                            const value = row[column.id];\n                            return (\n                            <TableCell key={i} align={column.align}>\n                                {column.format && typeof value === 'number' ? column.format(value) : value}\n                            </TableCell>\n                            );\n                        })}\n                        </TableRow>\n                    );\n                    })}\n                </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 25, 50, 100]}\n                component=\"div\"\n                labelRowsPerPage=\"Строк на странице\"\n                backIconButtonText='Пред. страница'\n                nextIconButtonText='След. страница'\n                count={data.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n            </Paper>) : null\n    );\n\n    return (\n        <Container className = {styles.container}>\n            <Grid container spacing = {1} justify = \"center\" direction = \"column\" alignItems = \"center\">\n              {data ? table : (<Loader />)}\n          </Grid>\n        </Container>\n    )\n}\n\nexport default InfoTable;","import React, {useState, useEffect} from 'react';\nimport {fetchCovidData} from './services/fetchApi';\nimport {Loader, Header, InfoCard, CountrySelect, Chart, InfoTable} from './components';\nimport {Button, Typography} from '@material-ui/core';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport styles from './App.module.scss';\n\nconst App = () => {\n\n    const [themeApp, setThemeApp] = useState('light');\n    const [covidData, setCovidData] = useState(null);\n    const [selectedCountry, setSelectedCountry] = useState('');\n    const [displayTable, setDisplayTable] = useState(false);\n    \n    const theme = createMuiTheme({\n        palette: {type:  themeApp},\n        });\n\n    useEffect(() => {\n        (async () => {\n            const fetchedData = await fetchCovidData();\n            fetchedData && setCovidData(fetchedData);\n        })();\n    }, []);\n\n    const handlerChangeTheme = () => setThemeApp(themeApp === 'light' ? 'dark' : 'light');\n    \n    const handleCountrySelect = async (selectedCountry) => {\n        setCovidData(await fetchCovidData(selectedCountry));\n        setSelectedCountry(selectedCountry);\n    };\n\n    const handleDisplayTable = () => setDisplayTable(!displayTable);\n\n    if (!covidData) {\n        return <Loader />\n    } else {\n        return (\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Header handlerChangeTheme = {handlerChangeTheme} themeApp = {themeApp}/>\n                    <CountrySelect handleCountrySelect = {handleCountrySelect}/>\n                    <InfoCard data = {covidData.data}/>\n                    <Chart countryData = {covidData.data} country = {selectedCountry}/>\n                    <div className = {styles.container}>\n                        <Typography variant = \"subtitle1\" className = \"subtitle\" color = \"textSecondary\">\n                            Ниже можно посмотреть подробную информацию по странам мира в виде таблицы\n                        </Typography> \n                        <Button variant=\"contained\" onClick = {handleDisplayTable} className = {styles.button}>\n                            {!displayTable ? 'Показать таблицу' : 'Скрыть таблицу'}\n                        </Button>\n                    </div>\n                    {displayTable && <InfoTable />} \n            </ThemeProvider>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\ndocument.title = 'COVID-19 Инфо';\n\nconsole.log(ReactDOM);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"button\":\"App_button__z3Rot\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Loader_container__25fpM\"};"],"sourceRoot":""}